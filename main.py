from typing import List,Optional
from fastapi import FastAPI,HTTPException

from pydantic import BaseModel,Field,field_validator



app = FastAPI()

class RequestBody(BaseModel):
    request_id: str = Field(...,description="a unique id generated by client to track transaction")
    company_name:str = Field(...,description="name of the company to search for")
    address: str =Field(...,description="full address of the company to search ")
    country:str = Field(...,description="country code of the company e.g USA,GBR etc")
    search_database:str = Field(default="abcd",description="database to search the company in eg db1,db2 etc")

@field_validator('request_id')
def validate_request_id(cls, v):
    """Ensure request_id is not empty string"""
    if not v.strip():
        raise ValueError('request_id must be a non-empty string')
    return v.strip()
class MatchOutCome(BaseModel):
    partner_code:str = Field(...,description="unique code identifying the matched partner in the system")
    company_name:str = Field(...,description="name of the matched company in database")
    address:str =Field(...,description="full address of the matched company in database")
    country:str = Field(...,description="country code of the matched company in database")
    state:str = Field(default="",description="state code of the matched company in database this can be empty string if not applicable ")
    postal:str = Field(...,description="postal code of the matched company  ")
    search_db :str = Field(...,description="database where the match was found")
    match_score:float = Field(...,description="a score between 0 to 100 indicating how close the match is to the request",ge=0,le=1.0)
@field_validator('match_score')
def validate_match_score(cls, v):
    """Ensure match score is within valid range"""
    if not 0.0 <= v <= 1.0:
        raise ValueError('match_score must be between 0.0 and 1.0')
    return round(v, 4)

class ResponseBody(BaseModel):
    request_id: str 
    top_5_matches:List[MatchOutCome] = Field(default_factory=list,description="An array containing the top 5 match outcomes, ranked by match_score from highest to lowest. The array will be empty if no matches are found",max_length=5)

@field_validator('top_5_matches')
def validate_matches_sorted(cls, v):
    """Ensure matches are sorted by match_score in descending order"""
    if len(v) > 1:
        scores = [match.match_score for match in v]
        if scores != sorted(scores, reverse=True):
            # Auto-sort if not properly sorted
            v.sort(key=lambda x: x.match_score, reverse=True)
    return v[:5]  # Ensure max 5 items

@app.post("/search",response_model=ResponseBody)
def search_company(request:RequestBody):
    """search for a company in the database and return top 5 matches"""
    try:
        # Your business logic here
        # This is just a placeholder response
        
        # Simulate some matches (replace with your actual search logic)
        sample_matches = [
            MatchOutCome(
                partner_code="PART001",
                company_name="Sample Company Inc",
                address="123 Main St, City, State",
                country="USA",
                state="CA",
                postal="12345",
                search_db=request.search_database,
                match_score=0.95
            )
        ]
        
        return ResponseBody(
            request_id=request.request_id,
            top_5_matches=sample_matches
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Search failed: {str(e)}")